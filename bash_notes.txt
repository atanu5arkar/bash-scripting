CH-23
------

- You can write a script to a file with no extension. If the script is valid and the file has required permission(s), you can run it.

- It's a good practice to start your script with #! (she-bang) followed by the path of the shell that the script should run in, e.g. #!/bin/bash

- Lines beginning with # are treated as comments.

- name=value creates a variable "name". Use $name to access its value.

    * Bash treats all values as strings.

    * A script runs in its own environment (shell), so any variable declared in the script is inaccessible in your current shell. 
    
    * To run it in the same shell, you must source it: source ./file OR . ./file

- You can also run the script like so: bash file. It does not require you to change file permissions.


CH-24
------

- Can use test command to evaluate Boolean expressions. (See the man page for usage syntax)

    * test <expression> is equivalent to [ <expression> ]

    * In Bash, semi-colon allows you to specify multiple commands on the same line. These cmds will be executed in sequence even if a few of them fail.
    
    Note: Use && if a command needs to run only when the previous one succeeds. 

    * test does not return any visible output; only its exit status changes (0 or 1) as per the truthiness of the expression. 
    
    * $? is a special variable (shell parameter) that captures the exit status of the last cmd. You can use it to print the boolean result.

- Flow Control: if then elif then else. At the end, type fi.

- To run a command in the context of another command (called command substitution), use backticks or $().

- In a for-loop, brace expansion {start..end} returns a list of strings.


CH-25
------

- We can pass arguments to a script. They are held by shell parameters $1, $2, and so on.

- Some special shell params:

    0 (script name)
    $ (script PID)
    ? (last cmd's exit status)
    # (no. of arguments)
    * (string of all the args)

- The shift statement discards the first param and renames the remaining ones, i.e., if called once, $2 becomes $1 and $# decreases by 1.

- Use read to take user input into your scripts and store it in a variable.

- Script and Shell Options (For Later)